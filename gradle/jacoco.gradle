apply plugin: 'jacoco'

tasks.register('codeCoverage', JacocoReport) {
    // The reports to be generated by this task.
    // Run with ./gradlew codeCoverage
    reports {
        html.required.set(true)
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/codeCoverage/html')
    }

    // Source sets that coverage should be reported for. Please be aware it's
    // adjusted to our project and set classes which best fits to your needs.
    classDirectories.setFrom(
            fileTree(getLayout().getBuildDirectory()) {
                include("/tmp/kotlin-classes/debug/**")
                exclude(
                        "**/R.class",
                        "**/R\$*.class",
                        "**/BuildConfig.*",
                        "**/Manifest\$*.*",
                        "**/airbnb/**/*.*",
                        "**/*Screen*",
                        "**/Showkase*",
                        "**/theme/Theme*",
                        "**/theme/Type*",
                )
            }
    )

    // Source sets that coverage should be reported for.
    def mainSrc = "$project.projectDir/src/main/kotlin"
    sourceDirectories.from(files([mainSrc]))

    // Collection of execution data files to analyze. Please be aware it's adjusted to our project.
    // In the next step I wll show you how to find these files!
    executionData.setFrom(
            fileTree(dir: getLayout().getBuildDirectory(), includes: ["/outputs/**/*.exec", "/outputs/**/*.ec"])
    )
}

tasks.register('testsWithCodeCoverage', JacocoReport) {

    // The reports to be generated by this task.
    // Run with ./gradlew testsWithCodeCoverage
    reports {
        html.required.set(true)
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/codeCoverage/html')
    }

    dependsOn(tasks.testDebugUnitTest)
    dependsOn(tasks.connectedDebugAndroidTest)

    // Source sets that coverage should be reported for. Please be aware it's
    // adjusted to our project and set classes which best fits to your needs.
    classDirectories.setFrom(
            fileTree(getLayout().getBuildDirectory()) {
                include("/tmp/kotlin-classes/debug/**")
                exclude(
                        "**/R.class",
                        "**/R\$*.class",
                        "**/BuildConfig.*",
                        "**/Manifest\$*.*",
                        "**/airbnb/**/*.*",
                        "**/*Screen*",
                        "**/Showkase*",
                        "**/theme/Theme*",
                        "**/theme/Type*",
                )
            }
    )

    // Source sets that coverage should be reported for.
    def mainSrc = "$project.projectDir/src/main/kotlin"
    sourceDirectories.from(files([mainSrc]))

    // Collection of execution data files to analyze. Please be aware it's adjusted to our project.
    // In the next step I wll show you how to find these files!
    executionData.setFrom(
            fileTree(dir: getLayout().getBuildDirectory(), includes: ["/outputs/**/*.exec", "/outputs/**/*.ec"])
    )
}